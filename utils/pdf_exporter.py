from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Image, Spacer
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import os
import arabic_reshaper
from bidi.algorithm import get_display

def reshape_arabic(text):
    reshaped = arabic_reshaper.reshape(text)
    return get_display(reshaped)

FONT_PATH = "assets/fonts/trado.ttf"
if os.path.exists(FONT_PATH):
    pdfmetrics.registerFont(TTFont("Arabic", FONT_PATH))
    default_font = "Arabic"
else:
    default_font = "Helvetica"

def generate_full_report_pdf(
    data_dict,
    from_date,
    to_date,
    logo_path,
    save_path,
    generated_by="admin",
    currency_mode="USD",
    jarde_rows=None
):
    jarde_rows = jarde_rows or []

    page_w, _ = A4
    left_margin = 1*cm
    right_margin = 1*cm
    available_w = page_w - left_margin - right_margin

    doc = SimpleDocTemplate(
        save_path, pagesize=A4,
        rightMargin=right_margin, leftMargin=left_margin, topMargin=1*cm, bottomMargin=1*cm
    )
    styles = getSampleStyleSheet()
    elements = []

    title_style = ParagraphStyle(name="TitleArabic", fontName=default_font, fontSize=16, alignment=1, leading=20, textColor=colors.black)
    section_style = ParagraphStyle(name="SectionArabic", fontName=default_font, fontSize=13, alignment=0, spaceAfter=5, textColor=colors.black)
    label_style = ParagraphStyle(name="Label", fontSize=10, spaceAfter=5, textColor=colors.black)
    summary_style = ParagraphStyle(name="Summary", fontSize=10, fontName=default_font, spaceBefore=3, leading=12, alignment=0, textColor=colors.darkblue, spaceAfter=10)
    jarde_title_style = ParagraphStyle(name="JardeTitle", fontName=default_font, fontSize=14, alignment=0, textColor=colors.black, spaceBefore=8, spaceAfter=6)

    table_style = TableStyle([
        ("GRID", (0, 0), (-1, -1), 0.6, colors.grey),
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("FONTNAME", (0, 0), (-1, -1), default_font),
        ("FONTSIZE", (0, 0), (-1, -1), 10),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
    ])

    if os.path.exists(logo_path):
        img = Image(logo_path, width=4 * cm, height=4 * cm)
        img.hAlign = 'CENTER'
        elements.append(img)

    title_text = "Generated Report / " + reshape_arabic("تقرير منشأ")
    elements.append(Paragraph(title_text, title_style))
    elements.append(Spacer(1, 0.3 * cm))
    elements.append(Paragraph(f"From: {from_date}   To: {to_date}", label_style))
    elements.append(Paragraph(f"Generated by: {generated_by}", label_style))
    elements.append(Paragraph(f"Currency: {currency_mode}", label_style))
    elements.append(Spacer(1, 0.5 * cm))


    for section, table_data in (data_dict or {}).items():
        is_arabic = any(c in section for c in "ابتثجحخدذرزسشصضطظعغفقكلمنهوي")
        section_title = reshape_arabic(section) if is_arabic else section
        elements.append(Paragraph(section_title, section_style))

        headers = table_data[0]
        rows = table_data[1:]

        for i in range(len(rows)):
            for j in range(len(rows[i])):
                val = rows[i][j]
                if isinstance(val, (int, float)):
                    rows[i][j] = f"{val:,.3f}"
                elif isinstance(val, str):
                    v = val.replace(',', '')
                    if v.replace('.', '', 1).isdigit():
                        rows[i][j] = f"{float(v):,.3f}"

        table = Table([headers] + rows, repeatRows=1, colWidths="*", hAlign="LEFT")
        table.setStyle(table_style)
        elements.append(table)

        summary_text = ""
        for col_index, col_name in enumerate(headers):
            try:
                vals = []
                for r in rows:
                    cell = r[col_index]
                    if isinstance(cell, str):
                        v = cell.replace(',', '')
                        if v.replace('.', '', 1).isdigit():
                            vals.append(float(v))
                    elif isinstance(cell, (int, float)):
                        vals.append(float(cell))
                if vals:
                    summary_text += f"<b>{col_name} Total:</b> {sum(vals):,.3f}    "
            except:
                continue
        if summary_text.strip():
            elements.append(Spacer(1, 0.2 * cm))
            elements.append(Paragraph(summary_text.strip(), summary_style))
            elements.append(Spacer(1, 0.3 * cm))
        else:
            elements.append(Spacer(1, 0.4 * cm))

    if jarde_rows:
        elements.append(Paragraph(reshape_arabic("Daily Inventory / الجردة اليومية"), jarde_title_style))
        jarde_headers = [reshape_arabic("Item / البند"), reshape_arabic("Value / القيمة")]

        formatted = []
        for label, val in jarde_rows:
            if " / " in label and "(Quantity)" in label:
                en, ar = label.split(" / ", 1)
                ar = ar.replace("(Quantity)", "").strip()
                label = f"{en} / {ar}"

            lbl = reshape_arabic(label)
            if isinstance(val, (int, float)):
                formatted.append([lbl, f"{val:,.3f}"])
            else:
                formatted.append([lbl, val or ""])

        
        jarde_table = Table(
            [jarde_headers] + formatted,
            repeatRows=1,
            colWidths=[available_w * 0.5, available_w * 0.5],
            hAlign="LEFT"
        )
        jarde_table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.6, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("FONTNAME", (0, 0), (-1, -1), default_font),
            ("FONTSIZE", (0, 0), (-1, -1), 10),
            ("ALIGN", (1, 1), (1, -1), "CENTER"),
        ]))
        elements.append(jarde_table)

    doc.build(elements)
